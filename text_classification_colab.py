# -*- coding: utf-8 -*-
"""text classification colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WXbfAIgliNNONMRQRyqIUmqPiw-JmcO6
"""


#pip install jpype1

import re
import nltk
nltk.download("stopwords")  #downloading stopwords
nltk.download('punkt')
nltk.download('wordnet')
import nltk as nlp
import string
from nltk import word_tokenize,sent_tokenize
from sklearn import preprocessing
from nltk.tokenize import word_tokenize
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report,precision_score
from jpype import JClass, JString, getDefaultJVMPath, shutdownJVM, startJVM, java

import seaborn as sns

from sklearn.metrics import r2_score
import statsmodels.api as sm

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

from sklearn import metrics

from sklearn.model_selection import KFold, train_test_split, cross_val_predict, cross_val_score


import warnings
warnings.filterwarnings('ignore')

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.feature_extraction.text import CountVectorizer
from wordcloud import WordCloud
import matplotlib.pyplot as plt

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report,precision_score
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier

import urllib.request
import os
import tempfile
import sys
import fileinput
import logging
import jpype

df = pd.read_csv("7allV03.csv")
df

encoder = preprocessing.LabelEncoder()
y = encoder.fit_transform(df.category)

y

print(jpype.java.lang.System.getProperty('java.class.path'))

def tokenizasyon(text):
    return word_tokenize(text)
def lemmatizer(text):
    lemma_words = []
    ZEMBEREK_PATH2 = r'/content/drive/MyDrive/MachineLearning/onderhoca/zemberek-full.jar'
    if jpype.isJVMStarted() is False:
        startJVM(getDefaultJVMPath(), '-ea', '-Djava.class.path=%s' % (ZEMBEREK_PATH2))
    TurkishMorphology = JClass('zemberek.morphology.TurkishMorphology')
    morphology = TurkishMorphology.createWithDefaults()
    for text in tokenizasyon(text):
        lemma_word = str(morphology.analyzeAndDisambiguate(str(text)).bestAnalysis()[0].getLemmas()[0])
        lemma_words.append(lemma_word)
    text = ' '.join(lemma_words)
    return text

def convert_lowercase(text):
    return text.lower()
def remove_punctuation(text):
    return ''.join(d for d in text if d not in string.punctuation)
def remove_stopwords(text):
    stopwords = []
    with open(r'/content/drive/MyDrive/MachineLearning/onderhoca/stopwords.txt', 'r',encoding='utf-8') as f:
        for word in f:
            word = word.split('\n')
            stopwords.append(word[0])
    clean_text = ' '.join(s for  s in text.split() if s not in stopwords)
    return clean_text
def remove_numbers(text):
    text = re.sub(r'\d', '', text)
    return text
def remove_less_than_2(text):
    text = ' '.join([w for w in text.split() if len(w)>2])
    return text
def remove_extra_space(text):
    ornek_text_strip = re.sub(' +', ' ', text)
    return ornek_text_strip.strip()

print(jpype.java.lang.System.getProperty('java.class.path'))

df['text'] = df['text'].apply(lemmatizer)
df['text'] = df['text'].apply(convert_lowercase)
df['text'] = df['text'].apply(remove_punctuation)
df['text'] = df['text'].apply(remove_stopwords)
df['text'] = df['text'].apply(remove_extra_space)
df['text'] = df['text'].apply(remove_numbers)
df['text'] = df['text'].apply(remove_less_than_2)

texts = []
for text in df.text:
    texts.append(text)

texts

with open("/content/drive/MyDrive/MachineLearning/onderhoca/kelimeler.txt", 'w') as f:
    for s in texts:
        f.write(str(s) + '\n')

# önişlenmiş verileri çağırıyorum
with open("/content/drive/MyDrive/MachineLearning/onderhoca/kelimeler.txt", 'r') as f:
    kelimeler = [line.rstrip('\n') for line in f]

kelimeler

"""# **EĞİTİM VE TEST**

TFidfVectorizer
"""

from sklearn.feature_extraction.text import TfidfVectorizer

max_features=500 # "number" most common(used) words in reviews
tfidf = TfidfVectorizer(ngram_range=(1,2), max_features=5000)
X = tfidf.fit_transform(kelimeler).toarray()

X.shape

y

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

"""# **SINIFLANDIRMALAR**"""

#KNN
warnings.filterwarnings('ignore')

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train,y_train)

y_pred=knn.predict(X_test)

print(classification_report(y_test,y_pred))

# Accuracy
knnDogruluk=accuracy_score(y_test,y_pred)
print("Knn Accuracy değeri:",knnDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Knn Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Knn Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("Knn F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt='.0f')
plt.show()

#KNN
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi

warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score
accuracy = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanKNN = accuracy.mean()*100
print('Accuracy', accMeanKNN)

precision = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring='precision')
precision = precision.mean()*100
print('Precision', precision)

recall = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring='recall')
recall = recall.mean()*100
print('Recall', recall)

f1_score = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring='f1')
f1_score = f1_score.mean()*100
print('F1_score', f1_score)

MAE = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring="neg_mean_absolute_error")
MAE = MAE.mean()
print('MAE değeri', np.abs(MAE) )

MSE = cross_val_score(estimator = knn, X=X_train, y=y_train, cv=10, scoring="neg_mean_squared_error")
MSE = MSE.mean()
print('MAE değeri', np.abs(MSE) )

# RMSE
RMSE = np.sqrt( np.abs(MSE) )
print("RMSE değeri:",RMSE)

#LogisticRegression
warnings.filterwarnings('ignore')

logr = LogisticRegression()
logr.fit(X_train,y_train)

y_pred=logr.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
logDogruluk=accuracy_score(y_test,y_pred)
print("Logistik Regresyon doğruluk:", logDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f",cmap='flag')
plt.show()

#LogisticRegression
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score
accuracy = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanlogr = accuracy.mean()*100
print('Accuracy', accMeanlogr)

precision = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring='precision')
precision = precision.mean()*100
print('Precision', precision)

recall = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring='recall')
recall = recall.mean()*100
print('Recall', recall)

f1_score = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring='f1')
f1_score = f1_score.mean()*100
print('F1_score', f1_score)

MAE = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring="neg_mean_absolute_error")
MAE = MAE.mean()
print('MAE değeri', np.abs(MAE) )

MSE = cross_val_score(estimator = logr, X=X_train, y=y_train, cv=10, scoring="neg_mean_squared_error")
MSE = MSE.mean()
print('MAE değeri', np.abs(MSE) )

# RMSE
RMSE = np.sqrt( np.abs(MSE) )
print("RMSE değeri:",RMSE)

#DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_train,y_train)

y_pred=dt.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
dtDogruluk=accuracy_score(y_test,y_pred)
print("Decision Tree doğruluk:", dtDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#DecisionTreeClassifier
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = dt, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanDT = accuracy.mean()*100
print('Accuracy', accMeanDT)

#SVC
warnings.filterwarnings('ignore')

"""
svc için en iyi değerler
{'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}
SVC(C=10, gamma=0.1)
"""

dvm = SVC(probability=True)
dvm.fit(X_train,y_train)

y_pred=dvm.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
dvmDogruluk=accuracy_score(y_test,y_pred)
print("SVM doğruluk:", dvmDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

import warnings
warnings.filterwarnings('ignore')

#SVC
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = dvm, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanSVC = accuracy.mean()*100
print('Accuracy', accMeanSVC)

#GaussianNB
warnings.filterwarnings('ignore')

from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()
gnb.fit(X_train,y_train)

y_pred=gnb.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
gnbDogruluk=accuracy_score(y_test,y_pred)
print("Gaussian NB doğruluk:", gnbDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)

cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#GaussianNB
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = gnb, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanGNB = accuracy.mean()*100
print('Accuracy', accMeanGNB)

#RandomForestClassifier
warnings.filterwarnings('ignore')

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
rfc.fit(X_train,y_train)

y_pred = rfc.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
randomForestDogruluk=accuracy_score(y_test,y_pred)
print("RandomForest doğruluk:", randomForestDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#RandomForestClassifier
#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = rfc, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanRFC = accuracy.mean()*100
print('Accuracy', accMeanRFC)

#Yapay Sinir Ağları(Artificial Nerual Network)

from sklearn.neural_network import MLPClassifier
mlpc = MLPClassifier()
mlpc_params = {'alpha':[1, 5, 0.1, 0.01, 0.03, 0.005, 0.0001 ],
              'hidden_layer_sizes': [(10,10), (100,100,100), (100,100), (3,5)]}

#mlpc = MLPClassifier(solver='lbfgs', activation='logistic')

#mlpc_cv_model = GridSearchCV(mlpc, mlpc_params, cv=10, n_jobs=-1, verbose=2).fit(X_train_scaler, y_train)
#mlpc_cv_model
#mlpc_cv_model.best_params_


mlpc.fit(X_train,y_train)

y_pred = mlpc.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
annDogruluk=accuracy_score(y_test,y_pred)
print("ANN doğruluk:", annDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#ANN

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = mlpc, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanANN = accuracy.mean()*100
print('Accuracy', accMeanANN)

# CART (Classification and Regression Tree)

from sklearn.tree import DecisionTreeClassifier

cart = DecisionTreeClassifier()
cart.fit(X_train, y_train)

y_pred = cart.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
cartDogruluk=accuracy_score(y_test,y_pred)
print("CART doğruluk:", cartDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#CART

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = cart, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanCART = accuracy.mean()*100
print('Accuracy', accMeanCART)

# Gradient Boosting Machine(GBM)

from sklearn.ensemble import GradientBoostingClassifier
gbm = GradientBoostingClassifier()
gbm.fit(X_train, y_train)

y_pred = gbm.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
gbmDogruluk=accuracy_score(y_test,y_pred)
print("GBM doğruluk:", gbmDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

#GBM

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = gbm, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanGBM = accuracy.mean()*100
print('Accuracy', accMeanGBM)

# eXtreme Gradient Boosting (XGBoost)

from xgboost import XGBClassifier
xgboost = XGBClassifier()
xgboost.fit(X_train, y_train)

y_pred = xgboost.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
xgboostDogruluk=accuracy_score(y_test,y_pred)
print("xgboost doğruluk:", xgboostDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

# xgboost

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = xgboost, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanXGBOOST = accuracy.mean()*100
print('Accuracy', accMeanXGBOOST)

# LightGBM

from lightgbm import LGBMClassifier
lightgbm = LGBMClassifier()
lightgbm.fit(X_train, y_train)

y_pred = lightgbm.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
lightgbmDogruluk=accuracy_score(y_test,y_pred)
print("LightGBM doğruluk:", lightgbmDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()



# LightGBM

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracy = cross_val_score(estimator = lightgbm, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanLGBM = accuracy.mean()*100
print('Accuracy', accMeanLGBM)

#pip install catboost

# Category Boosting (CatBoost)

from catboost import CatBoostClassifier
catboost = CatBoostClassifier()
catboost.fit(X_train, y_train, verbose=False)

y_pred = catboost.predict(X_test)
print(classification_report(y_test,y_pred))

# Accuracy
catboostDogruluk=accuracy_score(y_test,y_pred)
print("CatBoost doğruluk:", catboostDogruluk*100)

# Precision
from sklearn.metrics import precision_score
Precision =  precision_score(y_test, y_pred, average=None)
print("Precision değeri:",Precision[0]*100)

# Recall
from sklearn.metrics import recall_score
Recall = recall_score(y_test, y_pred, average=None)
print("Recall değeri:", Recall[0]*100)

# f1_score
from sklearn.metrics import f1_score
F1_score = f1_score(y_test, y_pred, average=None)
print("F1 Score değeri:",F1_score[0]*100)

# MAE
from sklearn.metrics import mean_absolute_error
MAE = mean_absolute_error(y_test, y_pred)
print("MAE değeri:",MAE)

# MSE
from sklearn.metrics import mean_squared_error
MSE = mean_squared_error(y_test, y_pred)
print("MSE değeri:",MSE)

# RMSE
RMSE = np.sqrt(MSE)
print("RMSE değeri:",RMSE)


cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt=".0f")
plt.show()

# CatBoost

#k-fold Cross Validation Yöntemiyle Modelin Performansının Ölçülmesi
warnings.filterwarnings('ignore')

from sklearn.model_selection import cross_val_score

accuracyCatB = cross_val_score(estimator = catboost, X=X_train, y=y_train, cv=10, scoring='accuracy')
accMeanCatB = accuracyCatB.mean()*100
print('Accuracy', accMeanCatB)



# sonuçları almak uzun sürdüğü için tek seferde tüm sonuçları alamadığım için değerleri el ile girdim

logDogruluk = 90.71428571428571
dtDogruluk = 71.12244897959184
randomForestDogruluk = 87.14285714285714
dvmDogruluk = 91.02040816326532
knnDogruluk = 84.08163265306122
gnbDogruluk = 80.61224489795919
annDogruluk = 90.20408163265307
cartDogruluk = 71.3265306122449
gbmDogruluk = 87.04081632653062
xgboostDogruluk = 88.36734693877551
lightgbmDogruluk = 89.08163265306122
catboostDogruluk = 87.75510204081633

modeller = pd.DataFrame({'Model':['Logistik Regresyon',
                                  'Karar Ağaçları',
                                  'Rastgele Orman',
                                  'Destek Vektör Makinesi',
                                  'K-en yakın komşu',
                                  'Gaussian NB',
                                   'ANN',
                                   'CART',
                                   'GBM',
                                   'XGBoost',
                                   'LightGBM',
                                   'CatBoost'
                                   ],
                        'Score':[ logDogruluk,dtDogruluk,randomForestDogruluk,dvmDogruluk,knnDogruluk,gnbDogruluk,annDogruluk,cartDogruluk,gbmDogruluk,xgboostDogruluk,lightgbmDogruluk,catboostDogruluk ] })

modeller

model_sort = modeller.sort_values(by='Score',ascending=False)
model_sort

sns.barplot( x = model_sort.Score , y=model_sort.Model )

plt.xlabel("Score")
plt.ylabel("Modeller")
plt.title("Sınıflandırma model scorları")
plt.show()



# k-fold sonuçları
accMeanlogr = 89.66836734693878
accMeanDT = 72.14285714285714
accMeanRFC = 87.24489795918367
accMeanSVC = 90.12755102040816
accMeanKNN = 82.98469387755102
accMeanGNB = 80.17857142857142
accMeanANN = 90.43367346938774
accMeanCART = 71.27551020408164
accMeanGBM = 86.60714285714285
accMeanXGBOOST = 87.52551020408163
accMeanLGBM = 88.6734693877551
#accMeanCatB

#k-fold sonuçları
modeller = pd.DataFrame({'Model':['Logistik Regresyon',
                                  'Karar Ağaçları',
                                  'Rastgele Orman',
                                  'Destek Vektör Makinesi',
                                  'K-en yakın komşu',
                                  'Gaussian NB',
                                   'ANN',
                                   'CART',
                                   'GBM',
                                   'XGBoost',
                                   'LightGBM',
                                 ],
                        'Score':[accMeanlogr,accMeanDT,accMeanRFC,accMeanSVC,accMeanKNN,accMeanGNB,accMeanANN,accMeanCART,accMeanGBM,accMeanXGBOOST,accMeanLGBM]})
modeller

model_sort = modeller.sort_values(by='Score',ascending=False)
model_sort

sns.barplot( x= model_sort.Score , y=model_sort.Model )

plt.xlabel("Score")
plt.ylabel("Modeller")
plt.title("Sınıflandırma model scorları")
plt.show()

